// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// prisma/schema.prisma - SQLite Version (No Installation Required!)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Make sure this says "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model University {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
}

model Department {
  id           String     @id @default(cuid())
  name         String
  universityId String
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  courses      Course[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([name, universityId])
}

model Course {
  id           String         @id @default(cuid())
  code         String
  name         String
  semester     Int
  credits      Int
  departmentId String
  department   Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  papers       QuestionPaper[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([code, departmentId])
}

model QuestionPaper {
  id         String     @id @default(cuid())
  year       Int
  semester   Int
  courseCode String
  courseTitle String
  examType   String     // regular or backlog
  courseId   String
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions  Question[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([courseId, year, examType])
}

model Question {
  id              String        @id @default(cuid())
  questionNumber  String        // e.g., "1(a)", "1(b)", "2(a)"
  questionText    String        
  marks          Int?
  tag            String        // definition, mathematical problem, theory, derivation
  topic          String?       // solar thermal, flat plate, etc.
  questionPaperId String
  questionPaper   QuestionPaper @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([questionPaperId])
}